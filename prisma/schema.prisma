datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// Each board contains problem lists
model Board {
  id            String @id @default(uuid())
  orgId         String
  title         String
  description   String
  imageId       String
  imageThumbUrl String @db.Text
  imageFullUrl  String @db.Text
  imageUserName String @db.Text
  imageLinkHTML String @db.Text

  problemLists ProblemList[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProblemList {
  id          String    @id @default(uuid())
  title       String
  boardId     String
  board       Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  description String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  problems    Problem[]

  @@index([boardId])
}

model Problem {
  id             String        @id @default(uuid())
  contestId      Int
  problemsetName String
  index          String
  name           String
  description    String
  difficulty     String
  pokemons       Pokemon[]
  problemLists   ProblemList[]
}

model User {
  id        String    @id @default(uuid())
  auth_id   String    @unique
  email     String    @unique
  name      String
  password  String
  rating    Int       @default(0)
  handle    String // codeforces handle, ppl not unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  pokemons  Pokemon[] // a list of pokemon owned
}

model Pokemon {
  id        String   @id @default(uuid())
  problemId String
  Problem   Problem  @relation(fields: [problemId], references: [id])
  name      String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id]) // potential not caught
  userId    String? // potential not caught
  rate      Int      @default(0) // rate of this pokemon being caught, rate / 100 = probability

  @@index([problemId], name: "problemId") // you catched this pokemon from this problem
  @@index([userId], name: "userId") // got catched by this user
}

enum ACTION {
  SOLVED
  FAILED
  CAUGHT
}

model AuditLog {
  id     String @id @default(uuid())
  orgId  String
  action ACTION

  userId      String
  userImage   String   @db.Text
  userName    String   @db.Text
  pokemonName String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
